{"version":3,"sources":["Counter/Counter.js","Question/Question.js","Option/Opt.js","Next/Next.js","FinalCounter/FinalCounter.js","App.js","serviceWorker.js","index.js"],"names":["Counter","props","className","current","total","marks","Question","que","question","Opt","onClick","opt","onChange","checked","value","type","name","Next","button","FinalCounter","App","state","cur","submitFlag","selectedOption","optionHandler","event","e","preventDefault","setState","nextHandler","axios","get","then","ans","data","answer","catch","error","alert","submitHandler","againHandler","ques","len","length","this","counter","key","finalCounter","choices","map","options","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"sYAeeA,G,MAZC,SAACC,GACb,OACI,yBAAKC,UAAU,WACX,yBAAKA,UAAU,OACX,6CAAmBD,EAAME,QAAS,EAAlC,MAAwCF,EAAMG,QAElD,yBAAKF,UAAU,SACX,uCAAaD,EAAMI,WCApBC,G,MAPE,SAACL,GAAW,IAAD,EACxB,OACI,yBAAKC,UAAU,YACX,kDAAcD,EAAMM,IAAIN,EAAME,gBAA9B,aAAc,EAA0BK,aCWrCC,G,MAdH,SAACR,GACT,OACI,yBAAKC,UAAU,WACX,2BAAOQ,QAAST,EAAMS,SAClB,6BACI,8BAAOT,EAAMU,MAEjB,6BACI,2BAAQC,SAAU,aAAQC,QAASZ,EAAMa,QAAQb,EAAMU,IAAKI,KAAK,QAAQC,KAAK,gBCDnFC,G,MAPF,SAAChB,GACV,OACI,yBAAKC,UAAU,QACX,4BAAQQ,QAAST,EAAMS,SAAUT,EAAMiB,WCSpCC,G,MAZM,SAAClB,GAClB,OACI,yBAAKC,UAAU,iBACX,yBAAKA,UAAU,aACX,oDAA0BD,EAAME,QAAS,EAAzC,MAA+CF,EAAMG,QAEzD,yBAAKF,UAAU,eACX,4CAAkBD,EAAMI,WC0JzBe,E,4MA1JbC,MAAQ,CACNb,SAAU,GACVJ,MAAO,GACPkB,IAAK,EACLjB,MAAO,EACPkB,YAAW,EACXC,eAAgB,I,EAelBC,cAAgB,SAACC,EAAOC,GACtBD,EAAME,iBAEN,EAAKC,SAAS,CACZL,eAAgBG,K,EAGpBG,YAAc,WAAO,IAAD,EACG,EAAKT,MAApBC,EADY,EACZA,IAAKjB,EADO,EACPA,MACX0B,IAAMC,IAAN,qDAAwD,EAAKX,MAAMC,IAAK,IACvEW,MAAK,SAAAC,GACDA,EAAIC,KAAKC,SAAW,EAAKf,MAAMG,eAGhC,EAAKK,SAAS,CACZP,IAAKA,EAAM,EACXE,eAAgB,GAChBnB,MAAQA,EAAQ,KAOlB,EAAKwB,SAAS,CACZP,IAAKA,EAAM,EACXE,eAAgB,GAChBnB,MAAQA,EAAQ,QAKrBgC,OAAM,SAAAC,GAAK,OAAIC,MAAM,8C,EAExBC,cAAgB,WAAO,IAChBnC,EAAU,EAAKgB,MAAfhB,MACH,EAAKwB,SAAS,CACZxB,MAAQA,EAAQ,GAChBkB,YAAW,K,EAGjBkB,aAAe,WACb,EAAKZ,SAAS,CACZP,IAAK,EACLjB,MAAO,EACPkB,YAAW,EACXC,eAAgB,M,kEA3DC,IAAD,OAClBO,IAAMC,IAAN,iDACGC,MAAK,SAAAS,GACJ,IAAMnC,EAAMmC,EAAKP,KACXQ,EAAMpC,EAAIqC,OAChB,EAAKf,SAAS,CACZrB,SAAUD,EACVH,MAAOuC,OAIVN,OAAM,SAAAC,GAAK,OAAIC,MAAM,+C,+BAoDhB,IAAD,WAC+CM,KAAKxB,MAArDC,EADC,EACDA,IAAKlB,EADJ,EACIA,MAAOC,EADX,EACWA,MAAOG,EADlB,EACkBA,SAAUgB,EAD5B,EAC4BA,eAC/BsB,EAAU,kBAAC,EAAD,CACZC,IAAKzB,EACLnB,QAASmB,EACTlB,MAAOA,EACPC,MAAOA,IAEL2C,EAAe,kBAAC,EAAD,CACjBD,IAAKzB,EACLnB,QAASmB,EACTlB,MAAOA,EACPC,MAAOA,IAELE,EAAM,kBAAC,EAAD,CACRwC,IAAK3C,EACLD,QAASmB,EACTlB,MAAOA,EACPC,MAAOA,EACPE,IAAKC,IAEHG,EAAG,UAAGkC,KAAKxB,MAAMb,SAASqC,KAAKxB,MAAMC,YAAlC,aAAG,EAAqC2B,QAAQC,KAAI,SAACC,EAAS7B,GAAV,OACzD,kBAAC,EAAD,CACEyB,IAAKzB,EACLX,IAAKwC,EACLrC,MAAOU,EACPd,QAAS,SAACiB,GAAD,OAAO,EAAKF,cAAcE,EAAGwB,SAG9C,OAAIN,KAAKxB,MAAME,WAkCP,yBAAKrB,UAAU,kBACb,yBAAKA,UAAU,eACb,yCAED8C,EACD,yBAAK9C,UAAU,OACf,kBAAC,EAAD,CACA6C,IAAKzB,EACLJ,OAAO,YACPR,QAAS,SAACiB,GAAD,OAAO,EAAKc,oBAzCzB,yBAAKvC,UAAU,OACb,yBAAKA,UAAU,eACb,yCAED4C,EACD,6BACGvC,EACD,yBAAKL,UAAU,OACZS,IAGL,6BACGW,EAAOlB,EAAO,EACb,kBAAC,EAAD,CACE2C,IAAKzB,EACLJ,OAAO,OACPR,QAAS,SAACiB,GAAD,OAAO,EAAKG,iBAGvB,kBAAC,EAAD,CACEiB,IAAKzB,EACLJ,OAAO,SACPR,QAAS,SAACiB,GAAD,OAAO,EAAKa,yB,GA7HjBY,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEd9B,OAAM,SAAAC,GACL8B,QAAQ9B,MAAMA,EAAM+B,c","file":"static/js/main.d30c0ec6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './counter.css';\r\n\r\nconst Counter = (props) => {\r\n    return (\r\n        <div className=\"counter\">\r\n            <div className=\"que\">\r\n                <h2>Question No : {props.current +1} / {props.total}</h2>\r\n            </div>\r\n            <div className=\"marks\">\r\n                <h3>Marks : {props.marks}</h3>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Counter","import React from 'react';\r\nimport './Question.css'\r\n\r\nconst Question = (props) => {\r\n    return (\r\n        <div className=\"question\">\r\n            <p>Question: {props.que[props.current]?.question}</p>\r\n        </div>\r\n    )\r\n}\r\nexport default Question\r\n","import React from 'react';\r\nimport './opt.css'\r\n\r\nconst Opt = (props) => {\r\n    return (\r\n        <div className=\"options\">\r\n            <label onClick={props.onClick}>\r\n                <div>\r\n                    <span>{props.opt}</span>\r\n                </div>\r\n                <div>\r\n                    <input  onChange={()=>{}} checked={props.value===props.opt} type='radio' name=\"answer\" />\r\n                </div>\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\nexport default Opt ","import React from 'react';\r\nimport './Next.css'\r\n\r\nconst Next = (props) =>{\r\n    return (\r\n        <div className=\"next\">\r\n            <button onClick={props.onClick}>{props.button}</button>\r\n        </div>\r\n    )\r\n}\r\nexport default Next","import React from 'react';\r\nimport './FinalCounter.css';\r\n\r\nconst FinalCounter = (props) => {\r\n    return (\r\n        <div className=\"final-counter\">\r\n            <div className=\"final-que\">\r\n                <h2>Question Attempted : {props.current +1} / {props.total}</h2>\r\n            </div>\r\n            <div className=\"final-marks\">\r\n                <h3>TotalMarks : {props.marks}</h3>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default FinalCounter","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport axios from 'axios';\r\nimport Counter from './Counter/Counter';\r\nimport Question from './Question/Question';\r\nimport Opt from './Option/Opt';\r\nimport Next from './Next/Next';\r\nimport FinalCounter from './FinalCounter/FinalCounter'\r\n\r\nclass App extends Component {\r\n  state = {\r\n    question: [],\r\n    total: '',\r\n    cur: 0,\r\n    marks: 0,\r\n    submitFlag:false,\r\n    selectedOption: \"\"\r\n  }\r\n  componentDidMount() {\r\n    axios.get(`https://react-appquiz.herokuapp.com/questions`)\r\n      .then(ques => {\r\n        const que = ques.data;\r\n        const len = que.length;\r\n        this.setState({\r\n          question: que,\r\n          total: len\r\n        });\r\n        // console.log(this.state);\r\n      })\r\n      .catch(error => alert('Could get the data from Question\\'s api'));\r\n  }\r\n  optionHandler = (event, e) => {\r\n    event.preventDefault();\r\n    // console.log(e, 1);\r\n    this.setState({\r\n      selectedOption: e\r\n    })\r\n  }\r\n  nextHandler = () => {\r\n    let { cur, marks } = this.state;\r\n    axios.get(`https://react-appquiz.herokuapp.com/answer/${this.state.cur +1}`)\r\n    .then(ans =>{\r\n      if(ans.data.answer === this.state.selectedOption){\r\n        // console.log(\"Correct !!!!\");\r\n        \r\n        this.setState({\r\n          cur: cur + 1,\r\n          selectedOption: '',\r\n          marks : marks + 10 \r\n        })\r\n        // console.log(this.state);\r\n\r\n      }\r\n      else{\r\n        // console.log(\"wrong !!!!!\");\r\n        this.setState({\r\n          cur: cur + 1,\r\n          selectedOption: '',\r\n          marks : marks - 10 \r\n        })\r\n        // console.log(this.state);\r\n      }\r\n    })\r\n    .catch(error => alert('Could get the data from Question\\'s api'));\r\n  }\r\n  submitHandler = () => {\r\n    let {marks } = this.state;\r\n      this.setState({\r\n        marks : marks + 10 ,\r\n        submitFlag:true\r\n      })\r\n  }\r\n  againHandler = () =>{\r\n    this.setState({\r\n      cur: 0,\r\n      marks: 0,\r\n      submitFlag:false,\r\n      selectedOption: \"\"\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let { cur, total, marks, question, selectedOption } = this.state;\r\n    let counter = <Counter\r\n      key={cur}\r\n      current={cur}\r\n      total={total}\r\n      marks={marks}\r\n    />\r\n    let finalCounter = <FinalCounter\r\n      key={cur}\r\n      current={cur}\r\n      total={total}\r\n      marks={marks}\r\n    />\r\n    let que = <Question\r\n      key={total}\r\n      current={cur}\r\n      total={total}\r\n      marks={marks}\r\n      que={question}\r\n    />\r\n    let opt = this.state.question[this.state.cur]?.choices.map((options, cur) => (\r\n      <Opt\r\n        key={cur}\r\n        opt={options}\r\n        value={selectedOption}\r\n        onClick={(e) => this.optionHandler(e, options)}\r\n      />\r\n    ))\r\nif(!this.state.submitFlag){\r\n    return (\r\n      <div className=\"App\" >\r\n        <div className=\"page-header\">\r\n          <h1>Quiz App</h1>\r\n        </div>\r\n        {counter}\r\n        <div>\r\n          {que}\r\n          <div className=\"opt\">\r\n            {opt}\r\n          </div>\r\n        </div>\r\n        <div>\r\n          {cur < (total -1) ?\r\n            <Next\r\n              key={cur}\r\n              button='Next'\r\n              onClick={(e) => this.nextHandler()}\r\n            />\r\n            :\r\n            <Next\r\n              key={cur}\r\n              button='Submit'\r\n              onClick={(e) => this.submitHandler()}\r\n            />\r\n          }\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n    else{\r\n      return (\r\n        <div className=\"App Finalscore\" >\r\n          <div className=\"page-header\">\r\n            <h1>Quiz App</h1>\r\n          </div>\r\n          {finalCounter}\r\n          <div className=\"try\">\r\n          <Next\r\n          key={cur}\r\n          button='Try Again'\r\n          onClick={(e) => this.againHandler()}\r\n          />\r\n        </div>\r\n        </div>\r\n        \r\n      );\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}